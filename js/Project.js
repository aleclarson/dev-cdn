// Generated by CoffeeScript 2.2.4
var AssetStream, Bucket, Project, app, fs, huey, log, path, vm;

Bucket = require('./Bucket');

huey = require('huey');

path = require('path');

app = require('./app');

log = require('./log');

fs = require('./fs');

vm = require('vm');

// Projects describe their assets with this class.
Project = class Project {
  constructor(root) {
    this.root = root;
    this.exts = [];
    this.bundles = Object.create(null);
    this;
  }

  init(opts) {
    if (opts.exts) {
      this.exts.push(...opts.exts);
    }
  }

  bundle(name, opts = {}) {
    if (this.bundles[name]) {
      throw Error(`Bundle named '${name}' already exists`);
    }
    this.bundles[name] = opts;
    this.exts.push(path.extname(name));
  }

  bucket(opts) {
    var bucket, name, root;
    ({name, root} = opts);
    if (name == null) {
      name = path.basename(this.root);
    }
    bucket = app.buckets[name];
    if (typeof root === 'string') {
      if (!path.isAbsolute(root)) {
        root = path.resolve(this.root, root);
      }
      if (!bucket) {
        bucket = new Bucket({name, root});
        app.buckets[name] = bucket;
      } else if (bucket.root !== root) {
        throw Error(`Bucket name '${name}' is already used by:\n  ${bucket.root}`);
      }
    } else if (root != null) {
      throw TypeError('`root` must be a string');
    } else if (!bucket) {
      throw Error('Bucket does not exist: ' + name);
    }
    if (this.buckets == null) {
      this.buckets = new Set;
    }
    this.buckets.add(bucket);
  }

  match(glob) {
    if (typeof glob === 'string') {
      // TODO: Support globbing.
      throw Error('Not implemented yet');
    }
    if (typeof glob === 'function') {
      // TODO: Filter functions
      throw Error('Not implemented yet');
    }
    if (Array.isArray(glob)) {
      glob.forEach(this.match.bind(this));
      return;
    }
    throw TypeError('Expected a string, function, or array');
  }

  static load(root) {
    var coffee, err, load, loadPath, project;
    loadPath = root + '/project.js';
    if (!fs.exists(loadPath)) {
      loadPath = root + '/project.coffee';
      if (fs.exists(loadPath)) {
        coffee = true;
      } else {
        return false;
      }
    }
    load = fs.readFile(loadPath);
    if (coffee) {
      try {
        coffee = require('coffeescript');
      } catch (error) {
        err = error;
        log.yellow('warn:', `You must do ${huey.cyan('npm install -g coffeescript')} before any 'project.coffee' files can be loaded!`);
        return false;
      }
      load = coffee.compile(load, {
        bare: true,
        filename: loadPath,
        sourceMap: false
      });
    }
    project = new Project(root);
    vm.runInNewContext(load, {project}, {
      filename: path,
      displayErrors: true,
      timeout: 10000 // 10s
    });
    return project;
  }

};

module.exports = Project;

// Assets can be mutated with this class.
AssetStream = class AssetStream {
  constructor(stream) {
    this._stream = stream;
    this;
  }

  transform(fn) {
    throw Error('Not implemented yet');
  }

  filter(fn) {
    throw Error('Not implemented yet');
  }

  concat() {
    throw Error('Not implemented yet');
  }

  toArray() {
    throw Error('Not implemented yet');
  }

};

//# sourceMappingURL=Project.js.map
