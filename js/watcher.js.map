{
  "version": 3,
  "file": "watcher.js",
  "sourceRoot": "..",
  "sources": [
    "src/watcher.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,IAAA,GAAA,EAAA,MAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,YAAA,EAAA;;AAAA,IAAA,GAAO,OAAA,CAAQ,MAAR;;AACP,GAAA,GAAM,OAAA,CAAQ,OAAR;;AACN,GAAA,GAAM,OAAA,CAAQ,OAAR;;AACN,GAAA,GAAM,OAAA,CAAQ,KAAR;;AACN,EAAA,GAAK,OAAA,CAAQ,MAAR,EAJL;;;AAQA,OAAA,GAAU;;AACV,OAAA,GAAU,IAAI;;AAEd,OAAO,CAAC,KAAR,GAAgB,QAAA,CAAA,CAAA;AACd,MAAA;EAAA,IAAG,CAAC,OAAJ;IACE,OAAA,GAAU;IAEV,CAAA,CAAC,OAAD,CAAA,GAAY,GAAZ;IACA,OAAO,CAAC,EAAR,CAAW,cAAX,EAA2B,IAAC,CAAA,KAA5B;IACA,OAAO,CAAC,EAAR,CAAW,gBAAX,EAA6B,IAAC,CAAA,OAA9B,EALF;;AADc;;AAShB,OAAO,CAAC,KAAR,GAAgB,QAAA,CAAC,IAAD,CAAA;EACd,IAAG,CAAC,OAAO,CAAC,GAAR,CAAY,IAAZ,CAAJ;WACE,OAAO,CAAC,GAAR,CAAY,IAAZ,EAAkB,YAAA,CAAa,IAAb,CAAlB,EADF;;AADc;;AAIhB,OAAO,CAAC,OAAR,GAAkB,QAAA,CAAC,IAAD,CAAA;AAChB,MAAA;EAAA,IAAG,MAAA,GAAS,OAAO,CAAC,GAAR,CAAY,IAAZ,CAAZ;IACE,OAAO,CAAC,MAAR,CAAe,IAAf;WACA,MAAM,CAAC,OAAP,CAAA,EAFF;;AADgB;;AAKlB,OAAO,CAAC,IAAR,GAAe,QAAA,CAAA,CAAA;EACb,IAAG,GAAG,CAAC,OAAP;IACE,GAAG,CAAC,SAAJ,CAAc,0BAAd,EADF;;EAEA,OAAA,GAAU;EACV,OAAO,CAAC,OAAR,CAAgB,QAAA,CAAC,CAAD,CAAA;WAAO,CAAC,CAAC,OAAF,CAAA;EAAP,CAAhB;AAJa,EA7Bf;;;;;AAwCA,MAAA,GAAS,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,EAAwB,QAAxB;;AACT,OAAA,GAAU;EACR,oBADQ;EAER,YAFQ;EAEM,IAFN;EAGR,WAHQ;EAzCV;;;;AAiDA,YAAA,GAAe,QAAA,CAAC,IAAD,CAAA;AACb,MAAA;EAAA,IAAA,GAAO,EAAE,CAAC,SAAH,CAAa,IAAI,CAAC,IAAlB;EACP,GAAG,CAAC,UAAJ,CAAe,mBAAf,EAAoC,IAApC;SACA,GAAG,CAAC,MAAJ,CAAW,IAAX,EAAiB;IAAC,MAAD;IAAS,OAAA,EAAS;EAAlB,CAAjB,CACA,CAAC,EADD,CACI,MADJ,EACY,QAAA,CAAC,IAAD,CAAA;AAEV,QAAA,OAAA,EAAA;IAAA,IAAG,IAAI,CAAC,IAAL,KAAa,cAAhB;AACE,aAAO,IAAI,CAAC,SAAL,CAAA,EADT;;IAGA,IAAG,IAAI,CAAC,IAAL,KAAa,GAAhB;AACE,aADF;;IAGA,CAAA,CAAC,OAAD,CAAA,GAAY,IAAZ;IACA,IAAG,IAAI,CAAC,GAAR;MACE,GAAA,GAAM,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAlB;AACN,aAAO,OAAO,CAAC,OAAR,CAAgB,IAAI,CAAC,IAArB,EAA2B,GAA3B,EAAgC,IAAhC,EAFT;;IAIA,IAAG,IAAI,CAAC,MAAR;MACE,OAAO,CAAC,UAAR,CAAmB,IAAI,CAAC,IAAxB,EADF;KAAA,MAAA;MAGE,OAAO,CAAC,UAAR,CAAmB,IAAI,CAAC,IAAxB,EAHF;;EAbU,CADZ;AAHa;;AAjDf",
  "sourcesContent": [
    "path = require 'path'\napp = require './app'\nlog = require './log'\nwch = require 'wch'\nfs = require './fs'\n\n# TODO: Invalidate package files when the package becomes unused\n\nstarted = false\nstreams = new Map\n\nexports.start = ->\n  if !started\n    started = true\n\n    {bundler} = app\n    bundler.on 'package:used', @watch\n    bundler.on 'package:unused', @unwatch\n    return\n\nexports.watch = (pack) ->\n  if !streams.has pack\n    streams.set pack, watchPackage pack\n\nexports.unwatch = (pack) ->\n  if stream = streams.get pack\n    streams.delete pack\n    stream.destroy()\n\nexports.stop = ->\n  if log.verbose\n    log.pale_pink 'Closing watch streams...'\n  started = false\n  streams.forEach (s) -> s.destroy()\n  return\n\n#\n# Helpers\n#\n\nfields = ['name', 'type', 'new', 'exists']\nignored = [\n  '**/node_modules/**' # dependencies\n  '.*.sw[a-z]', '*~'   # vim temporary files\n  '.DS_Store'          # macOS Finder metadata\n]\n\n# TODO: Update `package.dirs` when directories are added/removed\n# TODO: Clear module resolutions for removed dependencies\nwatchPackage = (pack) ->\n  root = fs.readLinks pack.path\n  log.pale_green 'Watching package:', root\n  wch.stream root, {fields, exclude: ignored}\n  .on 'data', (file) ->\n\n    if file.name is 'package.json'\n      return pack._readMeta()\n\n    if file.type is 'd'\n      return\n\n    {bundler} = pack\n    if file.new\n      ext = path.extname file.name\n      return bundler.addFile file.path, ext, pack\n\n    if file.exists\n      bundler.reloadFile file.path\n    else\n      bundler.deleteFile file.path\n    return\n\n#   const bundles = project\n#     .filterBundles(bundle => bundle.hasModule(file))\n#\n#   if (patch.event == 'change') {\n#     bundles.forEach(bundle => {\n#       bundle.reloadModule(patch.file)\n#     })\n#   } else if (patch.event == 'unlink') {\n#     bundles.forEach(bundle => {\n#       bundle.deleteModule(patch.file)\n#     })\n#   } else {\n#     const error = 'Expected `body.event` to equal \"change\" or \"unlink\"'\n#     return {status: 400, error}\n#   }\n#\n#   return {status: 200}\n# }\n"
  ]
}