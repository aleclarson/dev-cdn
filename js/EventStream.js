// Generated by CoffeeScript 2.2.4
var EventStream, isWritable;

isWritable = require('is-stream').writable;

EventStream = class EventStream {
  constructor() {
    this.streams = new Set;
    this;
  }

  emit(event, props) {
    event = `event: ${event}\ndata: ${JSON.stringify(props)}\n\n`;
    return this.streams.forEach(function(stream) {
      return stream.write(event);
    });
  }

  pipe(stream) {
    var unpipe;
    if (!isWritable(stream)) {
      throw Error('Cannot add non-writable stream');
    }
    // This stream is a ServerResponse.
    if (stream.socket) {
      // Prepare the headers.
      stream.set({
        'Connection': 'keep-alive',
        'Content-Type': 'text/event-stream; charset=utf-8',
        'Transfer-Encoding': 'chunked'
      });
      // Send the headers.
      stream.flushHeaders();
    }
    this.streams.add(stream);
    unpipe = () => {
      return this.unpipe(stream);
    };
    stream.on('close', unpipe);
    stream.on('finish', unpipe);
    return stream;
  }

  unpipe(stream) {
    if (arguments.length) {
      this.streams.delete(stream);
    } else {
      this.streams.forEach(function(stream) {
        return stream.end();
      });
      this.streams.clear();
    }
    return this;
  }

};

module.exports = EventStream;

//# sourceMappingURL=EventStream.js.map
